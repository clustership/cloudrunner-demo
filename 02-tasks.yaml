---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: patch-machinepool
  namespace: pipelines-demo
spec:
  workspaces:
  - name: source
  params:
    - name: machinepool_name
      description: The machinepool name
      type: string
      default: "pipelines-demo-worker"
    - name: cluster_namespace
      description: The namespace of the managed cluster definition
      type: string
      default: "demo-cd-cluster"
    - name: node_count
      description: The node count for this machineset
      type: string
      default: "3"
  steps:
    - name: apply
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          echo Patching machinepool $(inputs.params.machinepool_name) to $(inputs.params.node_count) replicas
          oc -n $(inputs.params.cluster_namespace) patch machinepool $(inputs.params.machinepool_name) --type merge -p '{ "spec": { "replicas": $(inputs.params.node_count) } }'
          echo -----------------------------------
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wait-for-machines
  namespace: pipelines-demo
spec:
  workspaces:
  - name: source
  params:
    - name: machinepool_name
      description: The machinepool name
      type: string
      default: "pipelines-demo-worker"
    - name: cluster_namespace
      description: The namespace of the managed cluster definition
      type: string
      default: "demo-cd-cluster"
    - name: node_count
      description: The node count for this machineset
      type: string
      default: "3"
  steps:
    - name: apply
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          replicas=$(oc -n $(inputs.params.cluster_namespace) get machinepool $(inputs.params.machinepool_name) -o jsonpath='{.status.replicas}')
          until [ $replicas = $(inputs.params.node_count) ]; do replicas=$(oc -n $(inputs.params.cluster_namespace) get machinepool $(inputs.params.machinepool_name) -o jsonpath='{.status.replicas}'); echo "${replicas}"; sleep 3; done
          echo Done!
          echo -----------------------------------
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: do-some-stuff
  namespace: pipelines-demo
spec:
  workspaces:
  - name: source
  params:
    - name: cluster_namespace
      description: The namespace of the managed cluster definition
      type: string
      default: "demo-cd-cluster"
  steps:
    - name: apply
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ["/bin/bash", "-c"]
      args:
        - |-
          sleep 30
          echo Done!
          echo -----------------------------------
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: extract-kubeconfig
  namespace: pipelines-demo
spec:
  params:
  - name: kubeconfig-secret
    description: kubeconfig secret name
    type: string
  - name: cluster-namespace
    description: Cluster namespace
    type: string
  - name: filename
    description: Kubeconfig filename
    type: string
    default: kubeconfig
  workspaces:
  - name: output
  steps:
  - name: extract
    image: quay.io/openshift/origin-cli:latest
    workingDir: /workspace/source
    command: ["/bin/bash", "-c"]
    args:
      - |-
        set -eu
        oc -n $(inputs.params.cluster-namespace) get secret $(inputs.params.kubeconfig-secret) -o jsonpath='{.data.kubeconfig}' | base64 -d > $(workspaces.output.path)/$(inputs.params.filename)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: authentication-test
  namespace: pipelines-demo
spec:
  params:
  - name: filename
    description: kubeconfig file name
    type: string
    default: kubeconfig
  workspaces:
  - name: input
    readOnly: true
  steps:
  - name: get
    image: quay.io/openshift/origin-cli:latest
    workingDir: /workspace/input
    command: ["/bin/bash", "-c"]
    args:
      - |-
        set -eu

        export KUBECONFIG="$(workspaces.input.path)/$(inputs.params.filename)"

        set -x
        env - oc --kubeconfig="$(workspaces.input.path)/$(inputs.params.filename)" status
        env - oc --kubeconfig="$(workspaces.input.path)/$(inputs.params.filename)" whoami
        env - oc --kubeconfig="$(workspaces.input.path)/$(inputs.params.filename)" whoami --show-server
        env - oc --kubeconfig="$(workspaces.input.path)/$(inputs.params.filename)" get pods -A
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ansible-job
  namespace: pipelines-demo
spec:
  params:
  - name: automation-host
    description: Automation Host
    type: string
    default: https://automation-ansible-automation-platform.apps.cluster-w7f5h.w7f5h.sandbox1288.opentlc.com
  - name: job-template
    description: Job Template
    type: string
    default: "Demo Job Template"
  - name: username
    description: Username
    type: string
  - name: password
    description: Password
    type: string
  workspaces:
  - name: source
  steps:
  - name: job 
    image: quay.io/xymox/aap-ee-ocp4:0.0.4
    workingDir: /workspace/input
    command: ["/bin/bash", "-c"]
    args:
      - |-
        set -eu

        awx --conf.host $(inputs.params.automation-host) --conf.username $(inputs.params.username) --conf.password $(inputs.params.password) job_templates launch "$(inputs.params.job-template)" --monitor -f human
